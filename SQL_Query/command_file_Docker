docker stop $(docker ps -a -q)                      - остановка всех контейнеров
docker rm $(docker ps -a -q)                        - удаление всех контейнеров
docker rmi $(docker images | awk '{ print $3; }')   - удаление всех неиспользуемых images

docker service rm $(docker service ls | awk '{print $1}') 
docker config rm $(docker config ls | awk '{print $1}') 
docker network prune
docker system prune
docker stack deploy -c docker-compose.yml mon

PS1='[\u@\h \W$(__docker_machine_ps1)]\$ '          - Enable Docker-machine
docker-machine ssh sw1                              - Connecting to wm1

-- создание изолированной сети для контейнеров
docker network create --driver overlay --subnet 10.10.1.0/24 --opt encrypted services_net
-- обыкновенный сервис busybox для теста
docker service create --name busybox --network services busybox sleep 3000
-- visualizer - Визуализация работы swarm оркестра
docker service create --name=viz --publish=8080:8080 --constraint=node.role==manager --mount=type=bind,src=/var/run/docker.sock,dst=/var/run/docker.sock dockersamples/visualizer


ab -n 10000 -c 50 http://192.168.99.101/            - проверка на пропускную способность сервера. 

docker build -t <<images>> .

docker run -p 80:80 
    -e 'PGADMIN_DEFAULT_EMAIL=test@test' \
    -e 'PGADMIN_DEFAULT_PASSWORD=test' \
    -d dpage/pgadmin4


docker run -d \
    --name some-postgres 
    -e POSTGRES_PASSWORD=12345678 \
    -e PGDATA=/var/lib/postgresql/data/pgdata \
    -v /custom/mount:/var/lib/postgresql/data \
    postgres

docker exec -it <<images>> bash

docker service create --name=postgres --publish=5432:5432 --constraint=node.role==worker postgres:swarm
docker service create --name=pgadmin -e 'PGADMIN_DEFAULT_EMAIL=test@test' -e 'PGADMIN_DEFAULT_PASSWORD=test' --publish=5050:80 dpage/pgadmin




docker run -e "ACCEPT_EULA=Y" -e "SA_PASSWORD=strong_PASSWORD" -p 1433:1433 --name sql1 -h sql1 -d mcr.microsoft.com/mssql/server:2019-latest
docker exec -it $(docker ps | awk $'{print $1}') /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P strong_PASSWORD


------------------------------------
--необходима настройка ssh сервера 
--необходима настройка ssh-ключа
NGINX
docker run -d -p 80:80 nginx

JENKINS
docker run -p 8080:8080 -p 50000:50000 jenkins
docker exec -it -u root <<container>> bash              --старт под учеткой root

docker inspect "mycontainer" -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}'